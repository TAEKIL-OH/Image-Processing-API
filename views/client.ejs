<!--
Taekil Oh
FEB 20 2024
client.ejs
purpose: cleint-side for image processing
-->
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <title>Upload and Display Image without Saving</title>
</head>

<body>
    <h2> Upload Image </h2>
    <form id="uploadForm" enctype="multipart/form-data">
        <input type="file" name="image" id="imageInput" required>
        <button type="button" id="uploadButton">Apply Image</button>
    </form>
    <br>
    <!-- Container for images -->
    <div id="imageContainer">
        <!-- Original Image -->
        <img id="displayedImage" alt="Uploaded Image" style="display:none;"><br>

        <!-- Thumbnail Image (if generated) will be inserted here -->
        <div id="thumbnailContainer">
            <img id="thumbnailImage" alt="Thumbnail Image" style="display:none;">
            <p id="thumbnailMessage" style="display:none;">No thumbnail yet</p>
        </div>    
    </div>
    <br>

    <h2> Operation Box </h2>
    <h3>----------------------------------</h3>
    <!-- Container for displaying selected operations -->
    <div id="selectedOperationsContainer"></div>
    <!-- List of operations -->
    <div id="operationsList">
        <h3>----------------------------------</h3>
        <h3> Click "+" and add the operations </h3>
        <div>
            <span class="add-operation" data-operation="verticalFlip">+</span> Flip Vertically
        </div>
        <div>
            <span class="add-operation" data-operation="horizontalFlip">+</span> Flip Horizontally
        </div>
        <div>
            <span class="add-operation" data-operation="colorToGrey">+</span> Convert to Grey
        </div>
        <div>
            <span class="add-operation" data-operation="rightRotating">+</span> rotating in right
        </div>
        <div>
            <span class="add-operation" data-operation="leftRotating">+</span> rotating in left
        </div>
        <div>
            <span class="add-operation" data-operation="angleRotate">+</span> Angle Rotating
            <input type="number" class="operation-input" data-operation="angleRotate" placeholder="Angle in degrees">
        </div>
        <div>
            <span class="add-operation" data-operation="resize">+</span> Percentage Resize
            <input type="number" class="operation-input" data-operation="resize" placeholder="Resize percentage">
        </div>        
        <div>
            <span class="add-operation" data-operation="thumbnail">+</span> thumbnail
        </div>
        <button type="button" id="userOperationListButton">user's sequence applying </button><br>
    </div>

    <h2> Operation Testing Section </h2>
    <form id="verticalFlipForm">
        <button type="button" id="verticalFlipButton">Flip in vertical</button>
    </form>

    <form id="horizontalFlipForm">
        <button type="button" id="horizontalFlipButton">Flip in horizontal</button>
    </form>

    <form id="colorGreyForm">
        <button type="button" id="colorGreyButton">color into grey</button>
    </form>

    <form id="rigthRotatingForm">
        <button type="button" id="rightRotatingButton">right-rotating in 90 degrees</button>
    </form>

    <form id="leftRotatingForm">
        <button type="button" id="leftRotatingButton">left-rotating in 90 degrees</button>
    </form>

    <form id="thumbnailForm">
        <button type="button" id="thumbnailingButton">generating thumbnail</button>
    </form>

    <form id="angleRotatingForm">
        <label for="angleInput">Enter rotation angle:</label>
        <input type="number" id="angleInput_button" name="angle" required>
        <button type="button" id="angleRotatingButton">degree angle Rotating</button>
    </form>

    <form id="resizingForm">
        <label for="resizeInput">resizing percentage:</label>
        <input type="number" id="resizeInput_button" name="resizing" required>
        <button type="button" id="resizingButton">% resizing</button>
    </form>

    <form id="openAPIForm">
        <button type="button" id="openAPIbutton">openAPI Live Documentation</button>
    </form>

<script>
    // dynamic input box
    document.addEventListener('DOMContentLoaded', function() {
        document.querySelectorAll('.add-operation').forEach(item => {
            item.addEventListener('click', function() {
                const operation = this.getAttribute('data-operation');
                // Find any associated input value
                const inputField = document.querySelector(`.operation-input[data-operation="${operation}"]`);

                if(operation === "angleRotate" && !inputField.value) {
                    alert (`Please enter a value for ${operation} before adding`);   
                }
                else if (operation === "resize" && !inputField.value) {
                    alert(`Please enter a value for ${operation} before adding`);
                } else {
                    const value = inputField ? inputField.value : '';
                    addOperationToList(operation, value);
                }
            });
        });

        // Function to add operation and input value to the list
        function addOperationToList(operation, value = '') {
            const operationElement = document.createElement('div');
            operationElement.textContent = `${operation} ${value ? `: ${value}` : ''}`;
            document.getElementById('selectedOperationsContainer').appendChild(operationElement);
        }
    });

    // image uploading
    document.getElementById('uploadButton').addEventListener('click', function() {
        var formData = new FormData();
        formData.append('image', document.getElementById('imageInput').files[0]);

        fetch('/upload', {
            method: 'POST',
            body: formData,
        })
        .then(response => response.json())
        .then(data => {
            if(data.imageUrl) {
                document.getElementById('displayedImage').src = data.imageUrl;
                document.getElementById('displayedImage').style.display = 'block';
            } else {
                console.error('Error:', data.error);
            }
        })
        .catch(error => console.error('Error:', error));
    });

    // sending the selection to server with single api call.
    // the operation list in the sequence by user 
    // multiple operations also possible.  
    document.getElementById('userOperationListButton').addEventListener('click', function() {
        
        const imageSrc = document.getElementById('displayedImage').src;

        if (!imageSrc) {
            alert("Please upload an image first.");
            return;
        }

        const operationElements = document.getElementById('selectedOperationsContainer').children;
        const operations = Array.from(operationElements).map(element => {
            const text = element.textContent;
            const [operation, paramText] = text.split(':').map(part => part.trim());
            let param = null;

            if(operation === 'angleRotate') {
                param = {angle: parseInt(paramText, 10)};
            } else if (operation === 'resize') {
                param = {percentage: parseInt(paramText, 10)};
            }

            return param ? {operation, param } : { operation };
        });

        // test flag
        console.log("before fetch" ,operations);

        // send the operations to the server
        fetch('/applyOperations', {
            method: 'POST', 
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({imageData: imageSrc, operations: operations}),
        })
        .then(response => response.json())
        .then(data => {
            if(data.imageUrl) {
                document.getElementById('displayedImage').src = data.imageUrl;
            } 
            else {
                console.error('Error:', data.error);
            }

            // handle multiple thumbnails
            const thumbnailContainer = document.getElementById('thumbnailContainer');

            // create existing thumbnails
            thumbnailContainer.innerHTML = ''; 

            // instead of single thumbnail maximum number of thumbnail? 3 to 5?
            // get thumbnail array and display some where 
            if (data.thumbnailImageUrl_Ops && data.thumbnailImageUrl_Ops.length > 0) {
                // iterate over the thumbnail url array
                data.thumbnailImageUrl_Ops.forEach(thumbnailImageUrl => {
                    const imageElement = document.createElement('img');
                    imageElement.src = thumbnailImageUrl;
                    imageElement.alt = '"thumbnail Image';
                    imageElement.style.display = 'block';
                    thumbnailContainer.appendChild(imageElement);
                });
            } else {
                // if no thumbnails were returned, optionally handle. 
                // Show message indicating no thumbnails yet
                const noThumbnailMsg = document.createElement('p');
                noThumbnailMsg.textContent = 'No thumbnails generated';
                thumbnailContainer.appendChild(noThumbnailMsg);
            }
        })
        .catch(error => console.error('Error:', error));
    });

    // up-down flip
    document.getElementById('verticalFlipButton').addEventListener('click', function() {
        const imageSrc = document.getElementById('displayedImage').src;
        fetch('/verticalFlip', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ imageData: imageSrc }),
        })
        .then(response => response.json())
        .then(data => {
            if(data.imageUrl) {
                document.getElementById('displayedImage').src = data.imageUrl;
            } else {
                console.error('Error:', data.error);
            }
        })
        .catch(error => console.error('Error:', error));
    });
    
    // left-right flip
    document.getElementById('horizontalFlipButton').addEventListener('click', function() {
        const imageSrc = document.getElementById('displayedImage').src;
        fetch('/horizontalFlip', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ imageData: imageSrc }),
        })
        .then(response => response.json())
        .then(data => {
            if(data.imageUrl) {
                document.getElementById('displayedImage').src = data.imageUrl;
            } else {
                console.error('Error:', data.error);
            }
        })
        .catch(error => console.error('Error:', error));
    });

    // converting to grey
    document.getElementById('colorGreyButton').addEventListener('click', function() {
        const imageSrc = document.getElementById('displayedImage').src;
        fetch('/colorToGrey', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ imageData: imageSrc }),
        })
        .then(response => response.json())
        .then(data => {
            if(data.imageUrl) {
                document.getElementById('displayedImage').src = data.imageUrl;
            } else {
                console.error('Error:', data.error);
            }
        })
        .catch(error => console.error('Error:', error));
    });

    // + 90 angle rotating generating
    document.getElementById('rightRotatingButton').addEventListener('click', function() {
        const imageSrc = document.getElementById('displayedImage').src;
        fetch('/rightRotating', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ imageData: imageSrc }),
        })
        .then(response => response.json())
        .then(data => {
            if(data.imageUrl) {
                document.getElementById('displayedImage').src = data.imageUrl;
            } else {
                console.error('Error:', data.error);
            }
        })
        .catch(error => console.error('Error:', error));
    });

    // - 90 angle rotating generating
    document.getElementById('leftRotatingButton').addEventListener('click', function() {
        const imageSrc = document.getElementById('displayedImage').src;
        fetch('/leftRotating', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ imageData: imageSrc }),
        })
        .then(response => response.json())
        .then(data => {
            if(data.imageUrl) {
                document.getElementById('displayedImage').src = data.imageUrl;
            } else {
                console.error('Error:', data.error);
            }
        })
        .catch(error => console.error('Error:', error));
    });

    // thumbnail generating
    document.getElementById('thumbnailingButton').addEventListener('click', function() {
        const imageSrc = document.getElementById('displayedImage').src;
        fetch('/generatingThumbnail', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ imageData: imageSrc }),
        })
        .then(response => response.json())
        .then(data => {
            if (data.thumbnailImageUrl) {
                // Show thumbnail image
                document.getElementById('thumbnailImage').src = data.thumbnailImageUrl;
                document.getElementById('thumbnailImage').style.display = 'block';
                document.getElementById('thumbnailMessage').style.display = 'none';
            } else {
                // Show message indicating no thumbnail yet
                document.getElementById('thumbnailImage').style.display = 'none';
                document.getElementById('thumbnailMessage').style.display = 'block';
            }
        })
        .catch(error => console.error('Error:', error));
    });

    // angle rotating generating
    document.getElementById('angleRotatingButton').addEventListener('click', function() {
        const imageSrc = document.getElementById('displayedImage').src;
        const angle = document.getElementById('angleInput_button').value; // get the user input 
        fetch('/angleRotating', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ 
                imageData: imageSrc,
                rotationAngle: angle // pass the angle
             }),
        })
        .then(response => response.json())
        .then(data => {
            if(data.imageUrl) {
                document.getElementById('displayedImage').src = data.imageUrl;
            } else {
                console.error('Error:', data.error);
            }
        })
        .catch(error => console.error('Error:', error));
    });

    // resizing
    document.getElementById('resizingButton').addEventListener('click', function() {
        const imageSrc = document.getElementById('displayedImage').src;
        const sizingPercentage = document.getElementById('resizeInput_button').value; // get the user input 
        
        // validate the input
        if(parseInt(sizingPercentage) < 0) {
            // if the input is negative
            // prompt the user to enter a positive value
            alert('Please enter a positive percentage.');
            // exit the function
            return;
        }

        fetch('/resizing', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ 
                imageData: imageSrc,
                percentage: sizingPercentage // pass the percentage
             }),
        })
        .then(response => response.json())
        .then(data => {
            if(data.imageUrl) {
                document.getElementById('displayedImage').src = data.imageUrl;
            } else {
                console.error('Error:', data.error);
            }
        })
        .catch(error => console.error('Error:', error));
    });

    document.getElementById('openAPIbutton').addEventListener('click', function() {
    window.open('http://localhost:3000/openapi-docs', '_blank');
    });
</script>

</body>

</html>

